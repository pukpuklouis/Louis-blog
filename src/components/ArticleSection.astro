---
import { getCollection } from 'astro:content';
import FormattedDate from './FormattedDate.astro';

const posts = await getCollection('blog');
const latestPosts = posts
  .sort((a: any, b: any) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .slice(0, 3);

function truncateDescription(description: string, maxLength: number = 30): string {
  if (description.length <= maxLength) return description;
  
  let truncated = description.slice(0, maxLength);
  const lastCommaIndex = truncated.lastIndexOf(',');
  
  if (lastCommaIndex > maxLength * 0.7) {
    // If a comma is found in the last 30% of the truncated string, cut there
    truncated = truncated.slice(0, lastCommaIndex);
  }
  
  // Ensure we don't cut in the middle of a word
  const lastSpaceIndex = truncated.lastIndexOf(' ');
  if (lastSpaceIndex > 0) {
    truncated = truncated.slice(0, lastSpaceIndex);
  }
  
  return truncated + '...';
}
---

<section class="article-section">
  <h2 class="article-section-title">最新宇宙紀錄</h2>
  <div class="post-grid">
    {latestPosts.map((post: any) => (
      <article class="post-card">
        <a href={`/blog/${post.slug}/`} class="post-link">
          {post.data.heroImage && (
            <div class="post-image-container" transition:name={post.slug} >
              <img 
                src={post.data.heroImage} 
                alt={`Hero image for ${post.data.title}`} 
                class="post-image"
              />
            </div>
          )}
          <div class="post-content">
            <h3 class="post-title">{post.data.title}</h3>
            <p class="post-description">{truncateDescription(post.data.description)}</p>
            <div class="post-date">
              <FormattedDate date={post.data.pubDate} />
            </div>
          </div>
        </a>
      </article>
    ))}
  </div>
</section>

<style>
  .article-section {
    width: 100%;
    max-width: 1020px;
    margin: 0 auto;
    padding: 1em;
    padding-left: 0em;
    padding-right: 0em;
  }
  .article-section-title {
    margin-bottom: 0.5em;
    text-align: left;
    font-family: 'Taipei Sans TC';
    font-weight: 700;
  }
  .post-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5em;
  }
  .post-card {
    border: 1px solid var(--theme-text);
    border-radius: 8px;
    overflow: hidden;
    transition: box-shadow 0.3s ease;
  }
  .post-card:hover {
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }
  .post-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }
  .post-image-container {
    width: 100%;
    height: 200px;
  }
  .post-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .post-content {
    padding: 1em;
  }
  .post-title {
    font-family: 'Taipei Sans TC';
    font-weight: 700;
    margin: 0.25em 0;
    font-size: 1.2em;
  }
  .post-description {
    font-family: 'Taipei Sans TC';
    font-weight: 300;
    line-height: 1.3;
    font-size: 0.9em;
    color: var(--theme-text);
    margin: 0.5em 0;
  }
  .post-date {
    font-size: 0.8em;
    color: var(--accent-dark);
  }

  @media (min-width: 768px) {
    .post-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .article-section-title {
      margin-left: -0.5em;
    }
    .post-grid {
      grid-template-columns: repeat(1, 1fr);
    }
    .post-link {
      display: flex;
      flex-direction: row;
      height: 100%;
    }
    .post-image-container {
      max-width: 200px;
      aspect-ratio: 1 / 1;
      height: auto;
    }
    .post-content {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
    }
    .post-description {
      flex-grow: 1;
    }
  }
</style>